{
  "api/Game.DayNightCycle.html": {
    "href": "api/Game.DayNightCycle.html",
    "title": "Class DayNightCycle | Example Unity documentation",
    "keywords": "Class DayNightCycle Inheritance object DayNightCycle Namespace: Game Assembly: cs.temp.dll.dll Syntax public class DayNightCycle : MonoBehaviour Fields cycleDuration Declaration public float cycleDuration Field Value Type Description float dayBackClouds Declaration public SpriteRenderer dayBackClouds Field Value Type Description SpriteRenderer dayFrontClouds Declaration public SpriteRenderer dayFrontClouds Field Value Type Description SpriteRenderer daySky Declaration public SpriteRenderer daySky Field Value Type Description SpriteRenderer eveningBackClouds Declaration public SpriteRenderer eveningBackClouds Field Value Type Description SpriteRenderer eveningFrontClouds Declaration public SpriteRenderer eveningFrontClouds Field Value Type Description SpriteRenderer eveningSky Declaration public SpriteRenderer eveningSky Field Value Type Description SpriteRenderer nightBackClouds Declaration public SpriteRenderer nightBackClouds Field Value Type Description SpriteRenderer nightFrontClouds Declaration public SpriteRenderer nightFrontClouds Field Value Type Description SpriteRenderer nightSky Declaration public SpriteRenderer nightSky Field Value Type Description SpriteRenderer transitionDuration Declaration public float transitionDuration Field Value Type Description float"
  },
  "api/Game.EventSystemizer.html": {
    "href": "api/Game.EventSystemizer.html",
    "title": "Class EventSystemizer | Example Unity documentation",
    "keywords": "Class EventSystemizer This class makes sure there is only one EventSystem in the game at any time. Inheritance object EventSystemizer Namespace: Game Assembly: cs.temp.dll.dll Syntax public class EventSystemizer : MonoBehaviour"
  },
  "api/Game.FallPlatform.html": {
    "href": "api/Game.FallPlatform.html",
    "title": "Class FallPlatform | Example Unity documentation",
    "keywords": "Class FallPlatform This class controls platforms that fall when touched by a player or another platform. The platform will fall after a delay and then reset to its original position. Inheritance object FallPlatform Namespace: Game Assembly: cs.temp.dll.dll Syntax public class FallPlatform : MonoBehaviour Fields fallDelay The time (in seconds) before the platform starts falling after being triggered. Declaration public float fallDelay Field Value Type Description float resetDelay The time (in seconds) before the platform resets to its original position after falling. Declaration public float resetDelay Field Value Type Description float"
  },
  "api/Game.GameManager.GameEvent.html": {
    "href": "api/Game.GameManager.GameEvent.html",
    "title": "Delegate GameManager.GameEvent | Example Unity documentation",
    "keywords": "Delegate GameManager.GameEvent A type of event that happens during the game, like when it starts or ends. Namespace: Game Assembly: cs.temp.dll.dll Syntax public delegate void GameManager.GameEvent()"
  },
  "api/Game.GameManager.GameMode.html": {
    "href": "api/Game.GameManager.GameMode.html",
    "title": "Enum GameManager.GameMode | Example Unity documentation",
    "keywords": "Enum GameManager.GameMode The different game modes players can choose from. Namespace: Game Assembly: cs.temp.dll.dll Syntax public enum GameManager.GameMode Fields Name Description freeForAll Players compete individually to be the last one standing. keepAway Players compete to hold an item (like a hat) for the longest time. obstacleCourse Players race to complete an obstacle course."
  },
  "api/Game.GameManager.html": {
    "href": "api/Game.GameManager.html",
    "title": "Class GameManager | Example Unity documentation",
    "keywords": "Class GameManager This class controls the main game logic, like starting the game, keeping track of players, handling game modes, and deciding when the game ends. Inheritance object GameManager Namespace: Game Assembly: cs.temp.dll.dll Syntax public class GameManager : MonoBehaviour Fields gameMode The current game mode (e.g., free-for-all, keep-away, or obstacle course). Declaration public static GameManager.GameMode gameMode Field Value Type Description GameManager.GameMode gameOver Whether the game is currently over. Declaration public bool gameOver Field Value Type Description bool gameTimer A timer that counts down during the game. Declaration public GameTimer gameTimer Field Value Type Description GameTimer hatObject The hat object used in \"keep-away\" mode. Declaration public GameObject hatObject Field Value Type Description GameObject hatSpawnPositions Positions where the hat can spawn in \"keep-away\" mode. Declaration public List<Vector2> hatSpawnPositions Field Value Type Description List<><Vector2> LeaderboardCanvas The canvas that shows the leaderboard during the game. Declaration public Canvas LeaderboardCanvas Field Value Type Description Canvas map The name of the map being played. Declaration public static string map Field Value Type Description string music Whether the background music is turned on. Declaration public static bool music Field Value Type Description bool obstacleCourseSpawnPosition The position where players spawn in obstacle course mode. Declaration public Vector2 obstacleCourseSpawnPosition Field Value Type Description Vector2 offset The distance between players when they spawn. Declaration public float offset Field Value Type Description float playerColors A list of colors assigned to each player. Declaration public static List<Color> playerColors Field Value Type Description List<><Color> playerHoldTimes Tracks how long each player has held an item in \"keep-away\" mode. Declaration public static Dictionary<GameObject, float> playerHoldTimes Field Value Type Description Dictionary<, ><GameObject, float> players A list of all the players in the game. Declaration public static List<GameObject> players Field Value Type Description List<><GameObject> spawnPosition The position where players spawn at the start of the game. Declaration public Vector2 spawnPosition Field Value Type Description Vector2 time The total time (in seconds) for the game to run. Declaration public float time Field Value Type Description float TimerCanvas The canvas that shows the timer during the game. Declaration public Canvas TimerCanvas Field Value Type Description Canvas Properties Instance The single instance of this class that can be accessed from anywhere in the game. Declaration public static GameManager Instance { get; } Property Value Type Description GameManager Methods AlivePlayers() Gets a list of all players who are still alive in the game. Declaration public List<GameObject> AlivePlayers() Returns Type Description List<><GameObject> A list of players who are still active in the game. Remarks This method checks all players in the game and returns only those who are still active. A player is considered \"alive\" if their GameObject is active in the scene. GameOver() Ends the game and determines the winner based on the current game mode. Declaration public void GameOver() Remarks This method handles the end-of-game logic, such as stopping the timer, hiding UI elements, and determining the winner based on the GameManager.GameMode. It also triggers the EndGameEvent for any subscribed listeners. In \"free-for-all\" mode, the last alive player is declared the winner. In \"keep-away\" mode, the player with the longest hold time wins. In \"obstacle course\" mode, the winner is determined by the ObstacleCourse logic. Examples GameManager.Instance.GameOver(); PlayerDied(Damageable) Handles what happens when a player dies, like respawning them or ending the game. Declaration public void PlayerDied(Damageable player) Parameters Type Name Description Damageable player The player who died. StartGame() Sets up the game based on the selected game mode. This includes spawning players and setting their lives. Declaration public void StartGame() UpdatePlayerHoldTime(GameObject, float) Updates the hold time for a player and refreshes the leaderboard. Declaration public void UpdatePlayerHoldTime(GameObject player, float holdTime) Parameters Type Name Description GameObject player The player whose hold time is being updated. float holdTime The new hold time for the player. Remarks This method updates the player's hold time in the dictionary and refreshes the leaderboard UI. If the player's hold time is higher than before, the leaderboard is re-sorted. Events EndGameEvent Event triggered when the game ends. Declaration public event GameManager.GameEvent EndGameEvent Event Type Type Description GameManager.GameEvent StartGameEvent Event triggered when the game starts. Declaration public event GameManager.GameEvent StartGameEvent Event Type Type Description GameManager.GameEvent"
  },
  "api/Game.GameManagerHelper.html": {
    "href": "api/Game.GameManagerHelper.html",
    "title": "Class GameManagerHelper | Example Unity documentation",
    "keywords": "Class GameManagerHelper This class helps manage positions for the GameManager during development. It allows adding hat spawn positions and player spawn positions directly in the editor. Inheritance object GameManagerHelper Namespace: Game Assembly: cs.temp.dll.dll Syntax public class GameManagerHelper : MonoBehaviour Fields addHatPosition If true, adds the current position of the \"HELPER\" object to the hat spawn positions in the GameManager. Declaration public bool addHatPosition Field Value Type Description bool addSpawnPosition If true, sets the current position of the \"HELPER\" object as the player spawn position in the GameManager. Declaration public bool addSpawnPosition Field Value Type Description bool"
  },
  "api/Game.GameTimer.html": {
    "href": "api/Game.GameTimer.html",
    "title": "Class GameTimer | Example Unity documentation",
    "keywords": "Class GameTimer This class manages the game's countdown timer. It starts, updates, and stops the timer, and ends the game when time runs out. Inheritance object GameTimer Namespace: Game Assembly: cs.temp.dll.dll Syntax public class GameTimer : MonoBehaviour Fields startTime The starting time for the timer, in seconds. Declaration public float startTime Field Value Type Description float timerText The UI text element that displays the timer. Declaration public Text timerText Field Value Type Description Text Methods StartTimer() Starts the timer if it is not already running. Declaration public void StartTimer()"
  },
  "api/Game.HatRespawn.html": {
    "href": "api/Game.HatRespawn.html",
    "title": "Class HatRespawn | Example Unity documentation",
    "keywords": "Class HatRespawn This class manages the behavior of the hat in the game, including its respawn logic. The hat can be picked up, dropped, and respawned after a certain amount of time. Inheritance object HatRespawn Namespace: Game Assembly: cs.temp.dll.dll Syntax public class HatRespawn : MonoBehaviour Fields canBePickedUp A flag to check if the hat can be picked up. Declaration public static bool canBePickedUp Field Value Type Description bool initialScale The initial scale of the hat. Declaration public Vector2 initialScale Field Value Type Description Vector2 initialSubhatPosition The initial position of the subhat (if applicable). Declaration public Vector2 initialSubhatPosition Field Value Type Description Vector2 respawnTime The amount of time (in seconds) before the hat respawns after being inactive. Declaration public const float respawnTime = 10 Field Value Type Description float Methods Interact() Updates the last interaction time when a player interacts with the hat. Declaration public void Interact() OnHatDropped() Marks the hat as dropped and resets the timer. Declaration public void OnHatDropped()"
  },
  "api/Game.HealthBarManager.html": {
    "href": "api/Game.HealthBarManager.html",
    "title": "Class HealthBarManager | Example Unity documentation",
    "keywords": "Class HealthBarManager This class manages the health bars for all players in the game. It creates, updates, and removes health bars as needed. Inheritance object HealthBarManager Namespace: Game Assembly: cs.temp.dll.dll Syntax public class HealthBarManager : MonoBehaviour Fields healthBarPrefab The template used to create new health bars. Declaration public GameObject healthBarPrefab Field Value Type Description GameObject"
  },
  "api/Game.html": {
    "href": "api/Game.html",
    "title": "Namespace Game | Example Unity documentation",
    "keywords": "Namespace Game Classes DayNightCycle EventSystemizer This class makes sure there is only one EventSystem in the game at any time. FallPlatform This class controls platforms that fall when touched by a player or another platform. The platform will fall after a delay and then reset to its original position. GameManager This class controls the main game logic, like starting the game, keeping track of players, handling game modes, and deciding when the game ends. GameManagerHelper This class helps manage positions for the GameManager during development. It allows adding hat spawn positions and player spawn positions directly in the editor. GameTimer This class manages the game's countdown timer. It starts, updates, and stops the timer, and ends the game when time runs out. HatRespawn This class manages the behavior of the hat in the game, including its respawn logic. The hat can be picked up, dropped, and respawned after a certain amount of time. HealthBarManager This class manages the health bars for all players in the game. It creates, updates, and removes health bars as needed. HubManager This class manages the hub area of the game, including loading and unloading game scenes, controlling the hub camera, and managing game buttons. InfiniteScroll This class handles the infinite scrolling effect for the background. LeaderboardManager This class manages the leaderboard, including initializing player icons, updating player positions, and displaying hold times. LifeDisplayManager This class manages the display of player lives, including creating life icons and updating them based on the player's remaining lives. MapSelect This class manages the map selection process by setting the selected map based on the active toggle in the toggle group. ModeSelect This class manages the game mode selection process by setting the game mode based on the active toggle in the toggle group. MovingPlatform This class controls a platform that moves between specified points in a loop. ObjectVisibility This class controls the visibility of an object based on the current game mode. ObstacleCourse This class handles the logic for detecting when a player completes the obstacle course. PlayerCardCreator This class is used to create cards for players when they join the game. PlayerJoinCard This class represents a player join card, displaying the player's number and preview in the game lobby. RespawnOnTriggerEnter This class handles respawning objects when they collide with a trigger tagged with a specific value. TerribleHealthBarScript This class manages the health bar visuals for a player, including updating the health bar's size, position, and color based on the player's current health. WinScreen Manages the win screen display for the game. Displays the winning player's information and triggers the win screen animation. Enums GameManager.GameMode The different game modes players can choose from. Delegates GameManager.GameEvent A type of event that happens during the game, like when it starts or ends."
  },
  "api/Game.HubManager.html": {
    "href": "api/Game.HubManager.html",
    "title": "Class HubManager | Example Unity documentation",
    "keywords": "Class HubManager This class manages the hub area of the game, including loading and unloading game scenes, controlling the hub camera, and managing game buttons. Inheritance object HubManager Namespace: Game Assembly: cs.temp.dll.dll Syntax public class HubManager : MonoBehaviour Fields gameButtonsParent The parent object containing all game buttons in the hub. Declaration public GameObject gameButtonsParent Field Value Type Description GameObject hubCamera The camera used in the hub area. Declaration public GameObject hubCamera Field Value Type Description GameObject Instance A single instance of this class that can be accessed from anywhere. Declaration public static HubManager Instance Field Value Type Description HubManager Methods LoadScene(string) Loads a new game scene and disables the hub camera. Declaration public void LoadScene(string sceneName) Parameters Type Name Description string sceneName The name of the scene to load. UnloadGameScene() Unloads the current game scene and reactivates the hub camera. Declaration public void UnloadGameScene()"
  },
  "api/Game.InfiniteScroll.html": {
    "href": "api/Game.InfiniteScroll.html",
    "title": "Class InfiniteScroll | Example Unity documentation",
    "keywords": "Class InfiniteScroll This class handles the infinite scrolling effect for the background. Inheritance object InfiniteScroll Namespace: Game Assembly: cs.temp.dll.dll Syntax public class InfiniteScroll : MonoBehaviour Fields end The ending position of the background. Declaration public float end Field Value Type Description float speed The speed at which the background scrolls. Declaration public float speed Field Value Type Description float start The starting position of the background. Declaration public float start Field Value Type Description float"
  },
  "api/Game.LeaderboardManager.html": {
    "href": "api/Game.LeaderboardManager.html",
    "title": "Class LeaderboardManager | Example Unity documentation",
    "keywords": "Class LeaderboardManager This class manages the leaderboard, including initializing player icons, updating player positions, and displaying hold times. Inheritance object LeaderboardManager Namespace: Game Assembly: cs.temp.dll.dll Syntax public class LeaderboardManager : MonoBehaviour Properties Instance A single instance of this class that can be accessed from anywhere. Declaration public static LeaderboardManager Instance { get; } Property Value Type Description LeaderboardManager Methods UpdateLeaderboard() Updates the leaderboard by sorting players based on their hold times and adjusting their positions. Declaration public void UpdateLeaderboard() UpdatePlayerHoldTimeText(GameObject, float) Updates the hold time text for a specific player on the leaderboard. Declaration public void UpdatePlayerHoldTimeText(GameObject player, float holdTime) Parameters Type Name Description GameObject player The player whose hold time is being updated. float holdTime The new hold time to display."
  },
  "api/Game.LifeDisplayManager.html": {
    "href": "api/Game.LifeDisplayManager.html",
    "title": "Class LifeDisplayManager | Example Unity documentation",
    "keywords": "Class LifeDisplayManager This class manages the display of player lives, including creating life icons and updating them based on the player's remaining lives. Inheritance object LifeDisplayManager Namespace: Game Assembly: cs.temp.dll.dll Syntax public class LifeDisplayManager : MonoBehaviour Fields lifeDisplays A dictionary mapping each player's Damageable component to their corresponding list of life icons. Declaration public Dictionary<Damageable, List<GameObject>> lifeDisplays Field Value Type Description Dictionary<, ><Damageable, List<><GameObject>> lifePrefab The prefab used to represent a single life icon. Declaration public GameObject lifePrefab Field Value Type Description GameObject playerPrefab The prefab used to represent a player in the life display. Declaration public GameObject playerPrefab Field Value Type Description GameObject players The parent object that contains all player life displays. Declaration public GameObject players Field Value Type Description GameObject Methods HideLifeDisplay() Hides the life display by deactivating the parent object. Declaration public void HideLifeDisplay()"
  },
  "api/Game.MapSelect.html": {
    "href": "api/Game.MapSelect.html",
    "title": "Class MapSelect | Example Unity documentation",
    "keywords": "Class MapSelect This class manages the map selection process by setting the selected map based on the active toggle in the toggle group. Inheritance object MapSelect Namespace: Game Assembly: cs.temp.dll.dll Syntax public class MapSelect : MonoBehaviour"
  },
  "api/Game.ModeSelect.html": {
    "href": "api/Game.ModeSelect.html",
    "title": "Class ModeSelect | Example Unity documentation",
    "keywords": "Class ModeSelect This class manages the game mode selection process by setting the game mode based on the active toggle in the toggle group. Inheritance object ModeSelect Namespace: Game Assembly: cs.temp.dll.dll Syntax public class ModeSelect : MonoBehaviour"
  },
  "api/Game.MovingPlatform.html": {
    "href": "api/Game.MovingPlatform.html",
    "title": "Class MovingPlatform | Example Unity documentation",
    "keywords": "Class MovingPlatform This class controls a platform that moves between specified points in a loop. Inheritance object MovingPlatform Namespace: Game Assembly: cs.temp.dll.dll Syntax public class MovingPlatform : MonoBehaviour Fields platform The platform object that will move. Declaration public Transform platform Field Value Type Description Transform points An array of points that the platform will move between. Declaration public Transform[] points Field Value Type Description Transform[] speed The speed at which the platform moves. Declaration public float speed Field Value Type Description float startPoint The index of the starting point for the platform. Declaration public int startPoint Field Value Type Description int"
  },
  "api/Game.ObjectVisibility.html": {
    "href": "api/Game.ObjectVisibility.html",
    "title": "Class ObjectVisibility | Example Unity documentation",
    "keywords": "Class ObjectVisibility This class controls the visibility of an object based on the current game mode. Inheritance object ObjectVisibility Namespace: Game Assembly: cs.temp.dll.dll Syntax public class ObjectVisibility : MonoBehaviour"
  },
  "api/Game.ObstacleCourse.html": {
    "href": "api/Game.ObstacleCourse.html",
    "title": "Class ObstacleCourse | Example Unity documentation",
    "keywords": "Class ObstacleCourse This class handles the logic for detecting when a player completes the obstacle course. Inheritance object ObstacleCourse Namespace: Game Assembly: cs.temp.dll.dll Syntax public class ObstacleCourse : MonoBehaviour Fields playerWon The player who successfully completes the obstacle course. Declaration public static GameObject playerWon Field Value Type Description GameObject"
  },
  "api/Game.PlayerCardCreator.html": {
    "href": "api/Game.PlayerCardCreator.html",
    "title": "Class PlayerCardCreator | Example Unity documentation",
    "keywords": "Class PlayerCardCreator This class is used to create cards for players when they join the game. Inheritance object PlayerCardCreator Namespace: Game Assembly: cs.temp.dll.dll Syntax public class PlayerCardCreator : MonoBehaviour Fields Instance A single instance of this class that can be accessed from anywhere. Declaration public static PlayerCardCreator Instance Field Value Type Description PlayerCardCreator playerJoinCardPrefab The template used to create new player cards. Declaration public GameObject playerJoinCardPrefab Field Value Type Description GameObject Methods CreateCard() Creates a new player card and returns it. Declaration public PlayerJoinCard CreateCard() Returns Type Description PlayerJoinCard The new player card, or nothing if it couldn't be created."
  },
  "api/Game.PlayerJoinCard.html": {
    "href": "api/Game.PlayerJoinCard.html",
    "title": "Class PlayerJoinCard | Example Unity documentation",
    "keywords": "Class PlayerJoinCard This class represents a player join card, displaying the player's number and preview in the game lobby. Inheritance object PlayerJoinCard Namespace: Game Assembly: cs.temp.dll.dll Syntax public class PlayerJoinCard : MonoBehaviour Fields playerNumber The number assigned to the player. Declaration public int playerNumber Field Value Type Description int playerNumberText The text element displaying the player's number. Declaration public TextMeshProUGUI playerNumberText Field Value Type Description TextMeshProUGUI playerPreview The preview object representing the player. Declaration public GameObject playerPreview Field Value Type Description GameObject"
  },
  "api/Game.RespawnOnTriggerEnter.html": {
    "href": "api/Game.RespawnOnTriggerEnter.html",
    "title": "Class RespawnOnTriggerEnter | Example Unity documentation",
    "keywords": "Class RespawnOnTriggerEnter This class handles respawning objects when they collide with a trigger tagged with a specific value. Inheritance object RespawnOnTriggerEnter Namespace: Game Assembly: cs.temp.dll.dll Syntax public class RespawnOnTriggerEnter : MonoBehaviour Fields respawnTag The tag of the trigger that causes the object to respawn. Declaration public string respawnTag Field Value Type Description string spawnPoint The spawn point where the object will respawn. Declaration public Vector2 spawnPoint Field Value Type Description Vector2 spawnPointIsInitialPosition If true, the spawn point is set to the object's initial position. Declaration public bool spawnPointIsInitialPosition Field Value Type Description bool"
  },
  "api/Game.TerribleHealthBarScript.html": {
    "href": "api/Game.TerribleHealthBarScript.html",
    "title": "Class TerribleHealthBarScript | Example Unity documentation",
    "keywords": "Class TerribleHealthBarScript This class manages the health bar visuals for a player, including updating the health bar's size, position, and color based on the player's current health. Inheritance object TerribleHealthBarScript Namespace: Game Assembly: cs.temp.dll.dll Syntax public class TerribleHealthBarScript : MonoBehaviour Fields actualHealthVisual The actual health bar that reflects the player's current health. Declaration public GameObject actualHealthVisual Field Value Type Description GameObject deathVisual The visual representation of the player's death state. Declaration public GameObject deathVisual Field Value Type Description GameObject fullDeathColor The color of the health bar when the player is at zero health. Declaration public Color fullDeathColor Field Value Type Description Color fullHealthColor The color of the health bar when the player is at full health. Declaration public Color fullHealthColor Field Value Type Description Color healthVisual The visual representation of the health bar. Declaration public GameObject healthVisual Field Value Type Description GameObject player The player associated with this health bar. Declaration public GameObject player Field Value Type Description GameObject smoothSpeed The speed at which the health bar updates smoothly. Declaration public float smoothSpeed Field Value Type Description float subtractionColor The color used to represent health subtraction. Declaration public Color subtractionColor Field Value Type Description Color text The text element displaying the player's current and maximum health. Declaration public TextMeshProUGUI text Field Value Type Description TextMeshProUGUI Methods SetPlayer(GameObject) Sets the player associated with this health bar. Declaration public void SetPlayer(GameObject player) Parameters Type Name Description GameObject player The player to associate with this health bar."
  },
  "api/Game.WinScreen.html": {
    "href": "api/Game.WinScreen.html",
    "title": "Class WinScreen | Example Unity documentation",
    "keywords": "Class WinScreen Manages the win screen display for the game. Displays the winning player's information and triggers the win screen animation. Inheritance object WinScreen Namespace: Game Assembly: cs.temp.dll.dll Syntax public class WinScreen : MonoBehaviour Fields Instance A singleton instance of the WinScreen class. Ensures only one instance of the WinScreen exists at a time. Declaration public static WinScreen Instance Field Value Type Description WinScreen playerTexts A list of text elements used to display player information on the win screen. Declaration public List<TextMeshProUGUI> playerTexts Field Value Type Description List<><TextMeshProUGUI> Methods ShowWinScreen(int) Displays the win screen for the specified player. Updates the text and color of the win screen to reflect the winning player. Declaration public void ShowWinScreen(int player) Parameters Type Name Description int player The number of the winning player (1-based index)."
  },
  "api/Music.AudioManager.html": {
    "href": "api/Music.AudioManager.html",
    "title": "Class AudioManager | Example Unity documentation",
    "keywords": "Class AudioManager This class manages the playback of sound effects in the game. It provides functionality to play specific sounds by name and ensures a singleton instance for global access. Inheritance object AudioManager Namespace: Music Assembly: cs.temp.dll.dll Syntax public class AudioManager : MonoBehaviour Fields Instance The singleton instance of the AudioManager class. Declaration public static AudioManager Instance Field Value Type Description AudioManager soundEffects A list of all sound effects managed by the AudioManager. Declaration public List<SoundEffect> soundEffects Field Value Type Description List<><SoundEffect> Methods PlaySound(string) Plays a sound effect by its name. Declaration public void PlaySound(string soundName) Parameters Type Name Description string soundName The name of the sound effect to play. Remarks If the sound name is \"Punch,\" it plays multiple punch-related sound effects. If the sound is not found, a warning is logged to the console."
  },
  "api/Music.html": {
    "href": "api/Music.html",
    "title": "Namespace Music | Example Unity documentation",
    "keywords": "Namespace Music Classes AudioManager This class manages the playback of sound effects in the game. It provides functionality to play specific sounds by name and ensures a singleton instance for global access. MusicManager Manages the music playlists for the game. Handles the initialization, playback, and shuffling of music tracks based on the active scene. Playlist Represents a playlist of music tracks. Contains information about the tracks, their associated scenes, and playback settings. SoundEffect Represents a sound effect, including its name and associated AudioSource. TrackLayer Represents a single layer of a music track. Each layer can be triggered and controlled independently based on game events or conditions. Enums TrackLayer.EnableTrigger Defines the conditions under which this layer is enabled."
  },
  "api/Music.MusicManager.html": {
    "href": "api/Music.MusicManager.html",
    "title": "Class MusicManager | Example Unity documentation",
    "keywords": "Class MusicManager Manages the music playlists for the game. Handles the initialization, playback, and shuffling of music tracks based on the active scene. Inheritance object MusicManager Namespace: Music Assembly: cs.temp.dll.dll Syntax public class MusicManager : MonoBehaviour Fields Instance A singleton instance of the MusicManager class. Ensures only one instance of the MusicManager exists at a time. Declaration public static MusicManager Instance Field Value Type Description MusicManager playlists A list of playlists available in the game. Declaration public List<Playlist> playlists Field Value Type Description List<><Playlist> songPrefab The prefab used to create audio sources for playing songs. Declaration public GameObject songPrefab Field Value Type Description GameObject Methods GetActiveSceneNotTitleScreen() Gets the name of the currently active scene, excluding the \"Title Screen\". Declaration public static string GetActiveSceneNotTitleScreen() Returns Type Description string The name of the active scene, or \"Title Screen\" if no other scene is active. StartPlaylist() Starts the music playlist for the current active scene. Declaration public void StartPlaylist() StartPlaylist(string) Starts the music playlist for a specific scene. Declaration public void StartPlaylist(string scene) Parameters Type Name Description string scene The name of the scene for which to start the playlist."
  },
  "api/Music.Playlist.html": {
    "href": "api/Music.Playlist.html",
    "title": "Class Playlist | Example Unity documentation",
    "keywords": "Class Playlist Represents a playlist of music tracks. Contains information about the tracks, their associated scenes, and playback settings. Inheritance object Playlist Namespace: Music Assembly: cs.temp.dll.dll Syntax [Serializable] public class Playlist Fields shuffleTime The time interval (in seconds) between shuffling tracks in the playlist. Declaration public float shuffleTime Field Value Type Description float songs A list of audio clips included in this playlist. Declaration public List<AudioClip> songs Field Value Type Description List<><AudioClip> trackName The name of the playlist. Declaration public string trackName Field Value Type Description string trackScenes A list of scenes where this playlist is used. Declaration public List<string> trackScenes Field Value Type Description List<><string> volume The volume level for the playlist. Declaration public float volume Field Value Type Description float"
  },
  "api/Music.SoundEffect.html": {
    "href": "api/Music.SoundEffect.html",
    "title": "Class SoundEffect | Example Unity documentation",
    "keywords": "Class SoundEffect Represents a sound effect, including its name and associated AudioSource. Inheritance object SoundEffect Namespace: Music Assembly: cs.temp.dll.dll Syntax public class SoundEffect Constructors SoundEffect(string, AudioSource) Initializes a new instance of the SoundEffect class. Declaration public SoundEffect(string name, AudioSource audioSource) Parameters Type Name Description string name The name of the sound effect. AudioSource audioSource The AudioSource component for the sound effect. Fields audioSource The AudioSource component that plays the sound effect. Declaration public AudioSource audioSource Field Value Type Description AudioSource name The name of the sound effect. Declaration public string name Field Value Type Description string"
  },
  "api/Music.TrackLayer.EnableTrigger.html": {
    "href": "api/Music.TrackLayer.EnableTrigger.html",
    "title": "Enum TrackLayer.EnableTrigger | Example Unity documentation",
    "keywords": "Enum TrackLayer.EnableTrigger Defines the conditions under which this layer is enabled. Namespace: Music Assembly: cs.temp.dll.dll Syntax public enum TrackLayer.EnableTrigger Fields Name Description Button Enabled when a button is pressed. Collectible Enabled when a collectible is interacted with. ConstantForce Enabled when a constant force is applied to the player. ElectromagneticPulse Enabled during an electromagnetic pulse event. EndOfLevel Enabled at the end of a level. Goal Enabled when a goal is activated. Magnetism Enabled when the player is magnetized. Movement Enabled when the player is moving. Scene Enabled when a specific scene is active. Toggle Enabled when a toggle is active."
  },
  "api/Music.TrackLayer.html": {
    "href": "api/Music.TrackLayer.html",
    "title": "Class TrackLayer | Example Unity documentation",
    "keywords": "Class TrackLayer Represents a single layer of a music track. Each layer can be triggered and controlled independently based on game events or conditions. Inheritance object TrackLayer Namespace: Music Assembly: cs.temp.dll.dll Syntax [Serializable] public class TrackLayer Fields enableTrigger The trigger condition for enabling this layer. Declaration public TrackLayer.EnableTrigger enableTrigger Field Value Type Description TrackLayer.EnableTrigger layerName The name of the music layer. Declaration public string layerName Field Value Type Description string layerScenes A list of scenes where this layer is active. If empty, the layer is active in all scenes. Declaration public List<string> layerScenes Field Value Type Description List<><string> layerTrack The audio clip associated with this music layer. Declaration public AudioClip layerTrack Field Value Type Description AudioClip triggerName The name of the object that triggers this layer. Declaration public string triggerName Field Value Type Description string"
  },
  "api/Player.AnimationPlayer.AnimationState.html": {
    "href": "api/Player.AnimationPlayer.AnimationState.html",
    "title": "Enum AnimationPlayer.AnimationState | Example Unity documentation",
    "keywords": "Enum AnimationPlayer.AnimationState Represents the different animation states the player can be in. Namespace: Player Assembly: cs.temp.dll.dll Syntax public enum AnimationPlayer.AnimationState Fields Name Description Idle The idle state, when the player is not moving. Jump The jumping state, when the player is in the air. Run The running state, when the player is moving quickly. Walk The walking state, when the player is moving slowly."
  },
  "api/Player.AnimationPlayer.html": {
    "href": "api/Player.AnimationPlayer.html",
    "title": "Class AnimationPlayer | Example Unity documentation",
    "keywords": "Class AnimationPlayer This class manages the player's animations, including setting animation states, handling directional changes, and triggering specific animations like punching. Inheritance object AnimationPlayer Namespace: Player Assembly: cs.temp.dll.dll Syntax public class AnimationPlayer : MonoBehaviour Fields backwards Indicates whether the player is facing backwards. Declaration public bool backwards Field Value Type Description bool block Indicates whether the player is currently blocking. Declaration public bool block Field Value Type Description bool clip The animation clip to play when the script starts. Declaration public AnimationClip clip Field Value Type Description AnimationClip state The current animation state of the player. Declaration public AnimationPlayer.AnimationState state Field Value Type Description AnimationPlayer.AnimationState Methods Punch() Triggers the punch animation. Declaration public void Punch() SetState(AnimationState) Sets the player's animation state. Declaration public void SetState(AnimationPlayer.AnimationState state) Parameters Type Name Description AnimationPlayer.AnimationState state The new animation state to set."
  },
  "api/Player.Block.html": {
    "href": "api/Player.Block.html",
    "title": "Class Block | Example Unity documentation",
    "keywords": "Class Block This class handles the player's ability to block and parry incoming attacks. Blocking reduces damage, while parrying reflects attacks if timed correctly. Inheritance object Block Namespace: Player Assembly: cs.temp.dll.dll Syntax public class Block : MonoBehaviour Fields blocking Indicates whether the player is currently blocking. Declaration public bool blocking Field Value Type Description bool Methods IsParrying() Checks if the player is currently parrying. Declaration public bool IsParrying() Returns Type Description bool True if the player is parrying, false otherwise."
  },
  "api/Player.Damageable.html": {
    "href": "api/Player.Damageable.html",
    "title": "Class Damageable | Example Unity documentation",
    "keywords": "Class Damageable This class handles the player's ability to take damage, die, and respawn. It also manages interactions like blocking, parrying, and dropping items when hit. Inheritance object Damageable Namespace: Player Assembly: cs.temp.dll.dll Syntax public class Damageable : MonoBehaviour Fields damage The current accumulated damage of the player. Declaration public float damage Field Value Type Description float damageSelfDebug If true, applies damage to self for debugging purposes. Declaration public bool damageSelfDebug Field Value Type Description bool dying Indicates whether the player is currently dying. Declaration public bool dying Field Value Type Description bool force The force applied to the player when hit. Declaration public float force Field Value Type Description float lives The number of lives the player has. Declaration public int lives Field Value Type Description int maxDamage The maximum damage the player can take before dying. Declaration public float maxDamage Field Value Type Description float Methods Damage(float) Adds a specified amount of damage to the player. Declaration public void Damage(float damage) Parameters Type Name Description float damage The amount of damage to add. HandleDeath() Handles player state after death and resets dying state after respawn. Declaration public void HandleDeath() ResetDamage() Resets the player's damage to zero. Declaration public void ResetDamage() Respawn() Respawns the player at the spawn position and resets damage/health bar. Declaration public void Respawn() Events OnPlayerDeath Event triggered when a player dies. Declaration public event Action<GameObject> OnPlayerDeath Event Type Type Description System.Action<T><GameObject> OnPlayerPunched Event triggered when the player is punched. Declaration public event Action<GameObject> OnPlayerPunched Event Type Type Description System.Action<T><GameObject> OnPlayerRespawn Event triggered when a player respawns. Declaration public event Action<GameObject> OnPlayerRespawn Event Type Type Description System.Action<T><GameObject>"
  },
  "api/Player.html": {
    "href": "api/Player.html",
    "title": "Namespace Player | Example Unity documentation",
    "keywords": "Namespace Player Classes AnimationPlayer This class manages the player's animations, including setting animation states, handling directional changes, and triggering specific animations like punching. Block This class handles the player's ability to block and parry incoming attacks. Blocking reduces damage, while parrying reflects attacks if timed correctly. Damageable This class handles the player's ability to take damage, die, and respawn. It also manages interactions like blocking, parrying, and dropping items when hit. PlayerCameraMovement This class controls the movement of the camera to follow players during the game. It also handles special behavior for the camera in the win scene. PlayerManager This class manages player-related functionality, such as joining, leaving, and assigning colors. It also handles starting the game once players have joined. PlayerMovement This class handles the player's movement, including walking, jumping, and animations. It also manages input, physics, and interactions with the ground. Punch This class handles the punching mechanic for the player, including triggering animations, enabling and disabling the hurtbox, and managing player speed during a punch. TeleportPlatform This class handles teleportation for platforms and players when they collide with the teleport trigger. It can teleport either the platform itself or a player to a specified location. UseItem This class allows a player to pick up, hold, and drop items during the game. It is primarily used for managing interactions with the \"hat\" in \"keep-away\" mode. Enums AnimationPlayer.AnimationState Represents the different animation states the player can be in."
  },
  "api/Player.PlayerCameraMovement.html": {
    "href": "api/Player.PlayerCameraMovement.html",
    "title": "Class PlayerCameraMovement | Example Unity documentation",
    "keywords": "Class PlayerCameraMovement This class controls the movement of the camera to follow players during the game. It also handles special behavior for the camera in the win scene. Inheritance object PlayerCameraMovement Namespace: Player Assembly: cs.temp.dll.dll Syntax public class PlayerCameraMovement : MonoBehaviour Fields lowerBound The lowest vertical position the camera can move to. Declaration public float lowerBound Field Value Type Description float speed The speed at which the camera moves toward the target position. Declaration public float speed Field Value Type Description float staticCamera Indicates whether the camera should remain static and not follow players. Declaration public bool staticCamera Field Value Type Description bool weight The weight used to blend between the camera's starting position and the players' average position. Declaration public float weight Field Value Type Description float winScene Indicates whether the camera is in the win scene mode. Declaration public bool winScene Field Value Type Description bool Methods WinScene(GameObject) Activates the win scene mode and focuses the camera on the winning player. Declaration public void WinScene(GameObject player) Parameters Type Name Description GameObject player The player who won the game."
  },
  "api/Player.PlayerManager.html": {
    "href": "api/Player.PlayerManager.html",
    "title": "Class PlayerManager | Example Unity documentation",
    "keywords": "Class PlayerManager This class manages player-related functionality, such as joining, leaving, and assigning colors. It also handles starting the game once players have joined. Inheritance object PlayerManager Namespace: Player Assembly: cs.temp.dll.dll Syntax public class PlayerManager : MonoBehaviour Fields cards A list of player join cards, which represent players in the UI. Declaration public List<PlayerJoinCard> cards Field Value Type Description List<><PlayerJoinCard> Instance The singleton instance of the PlayerManager class. Declaration public static PlayerManager Instance Field Value Type Description PlayerManager playerColors A list of colors assigned to players for identification. Declaration public List<Color> playerColors Field Value Type Description List<><Color> playerSelect The UI element used for player selection. Declaration public GameObject playerSelect Field Value Type Description GameObject Methods StartGame() Starts the game if at least one player has joined. Declaration public void StartGame()"
  },
  "api/Player.PlayerMovement.html": {
    "href": "api/Player.PlayerMovement.html",
    "title": "Class PlayerMovement | Example Unity documentation",
    "keywords": "Class PlayerMovement This class handles the player's movement, including walking, jumping, and animations. It also manages input, physics, and interactions with the ground. Inheritance object PlayerMovement Namespace: Player Assembly: cs.temp.dll.dll Syntax public class PlayerMovement : MonoBehaviour Fields coyoteTime Time window after leaving ground where jump is still allowed (coyote time). Declaration public float coyoteTime Field Value Type Description float ground Layers considered as ground for the player. Declaration public LayerMask ground Field Value Type Description LayerMask groundCheckDistance Distance to check below the player for ground detection. Declaration public float groundCheckDistance Field Value Type Description float jumpLenience Time window after pressing jump where jump is still buffered. Declaration public float jumpLenience Field Value Type Description float jumpSpeed Force applied when jumping. Declaration public float jumpSpeed Field Value Type Description float maxSpeed Maximum allowed horizontal speed for the player. Declaration public float maxSpeed Field Value Type Description float maxSpeedOverride Runtime override for the maximum speed. Declaration public float maxSpeedOverride Field Value Type Description float playerText Reference to the player's UI text displaying player index. Declaration public TextMeshProUGUI playerText Field Value Type Description TextMeshProUGUI secondsToFullSpeed Time in seconds to reach full speed from rest. Declaration public float secondsToFullSpeed Field Value Type Description float slowdownMultiplier Multiplier for slowing down the player when exceeding max speed. Declaration public float slowdownMultiplier Field Value Type Description float timeUnableToBeDeclaredNotJumping Minimum time before the player can be declared as not jumping. Declaration public float timeUnableToBeDeclaredNotJumping Field Value Type Description float turnaroundMultiplier Multiplier applied when turning around to adjust speed. Declaration public float turnaroundMultiplier Field Value Type Description float virtualAxisX Current value of the horizontal movement axis. Declaration public float virtualAxisX Field Value Type Description float virtualButtonJump Current value of the jump button (pressed or not). Declaration public float virtualButtonJump Field Value Type Description float virtualButtonJumpLastFrame Value of the jump button in the previous frame. Declaration public float virtualButtonJumpLastFrame Field Value Type Description float walkSmooth Smoothing factor for walking movement. Declaration public float walkSmooth Field Value Type Description float walkSpeed Declaration public float walkSpeed Field Value Type Description float walkSpeedFactor Multiplier applied to walk speed. Declaration public float walkSpeedFactor Field Value Type Description float Methods GetPointInBoxCollider(BoxCollider2D, float, float) Gets a point on the BoxCollider2D based on horizontal and vertical multipliers. Declaration public Vector2 GetPointInBoxCollider(BoxCollider2D boxCollider2D, float horizontal, float vertical) Parameters Type Name Description BoxCollider2D boxCollider2D The BoxCollider2D to use. float horizontal Horizontal offset (-1 for left, 1 for right, 0 for center). float vertical Vertical offset (-1 for bottom, 1 for top, 0 for center). Returns Type Description Vector2 The calculated point in world space. IsBasicallyGrounded() Checks if the player is considered grounded, including coyote time. Declaration public bool IsBasicallyGrounded() Returns Type Description bool True if the player is basically grounded, otherwise false. IsPhysicallyGrounded() Checks if the player is physically touching the ground using raycasts. Declaration public bool IsPhysicallyGrounded() Returns Type Description bool True if the player is physically grounded, otherwise false. StopVelocity() Stops the player's velocity if grounded, removing inertia. Declaration public void StopVelocity()"
  },
  "api/Player.Punch.html": {
    "href": "api/Player.Punch.html",
    "title": "Class Punch | Example Unity documentation",
    "keywords": "Class Punch This class handles the punching mechanic for the player, including triggering animations, enabling and disabling the hurtbox, and managing player speed during a punch. Inheritance object Punch Namespace: Player Assembly: cs.temp.dll.dll Syntax public class Punch : MonoBehaviour Fields cancelable Determines whether the player can cancel their punch action. Declaration public bool cancelable Field Value Type Description bool Methods DisableCancellation() Disables the ability to cancel the punch action. Declaration public void DisableCancellation() DisableHurtbox() Disables the hurtbox, preventing the punch from interacting with other objects. Declaration public void DisableHurtbox() EnableCancellation() Enables the ability to cancel the punch action. Declaration public void EnableCancellation() EnableHurtbox() Enables the hurtbox, allowing the punch to interact with other objects. Declaration public void EnableHurtbox() ReturnToMaxSpeed() Resets the player's movement speed to its maximum value after the punch is complete. Declaration public void ReturnToMaxSpeed()"
  },
  "api/Player.TeleportPlatform.html": {
    "href": "api/Player.TeleportPlatform.html",
    "title": "Class TeleportPlatform | Example Unity documentation",
    "keywords": "Class TeleportPlatform This class handles teleportation for platforms and players when they collide with the teleport trigger. It can teleport either the platform itself or a player to a specified location. Inheritance object TeleportPlatform Namespace: Player Assembly: cs.temp.dll.dll Syntax public class TeleportPlatform : MonoBehaviour Fields isPlatform Determines whether this script is handling a platform or a player. If true, it teleports players. If false, it teleports the platform itself. Declaration public bool isPlatform Field Value Type Description bool playerTag The tag used to identify player objects. Declaration public string playerTag Field Value Type Description string teleportPoint The position where the platform or player will be teleported. Declaration public Vector2 teleportPoint Field Value Type Description Vector2 teleportTag The tag used to identify objects (e.g., platforms) that can trigger teleportation. Declaration public string teleportTag Field Value Type Description string"
  },
  "api/Player.UseItem.html": {
    "href": "api/Player.UseItem.html",
    "title": "Class UseItem | Example Unity documentation",
    "keywords": "Class UseItem This class allows a player to pick up, hold, and drop items during the game. It is primarily used for managing interactions with the \"hat\" in \"keep-away\" mode. Inheritance object UseItem Namespace: Player Assembly: cs.temp.dll.dll Syntax public class UseItem : MonoBehaviour Fields head The position where the item will be held (e.g., above the player's head). Declaration public Transform head Field Value Type Description Transform holdTime The total time the player has held the item. Declaration public float holdTime Field Value Type Description float Methods DropItem() Allows the player to drop the item they are holding. Declaration public void DropItem() IsHoldingItem() Checks if the player is currently holding an item. Declaration public bool IsHoldingItem() Returns Type Description bool True if the player is holding an item, false otherwise. PickUpItem(GameObject) Allows the player to pick up an item and start the hold timer. Declaration public void PickUpItem(GameObject item) Parameters Type Name Description GameObject item The item to pick up."
  },
  "manual/coniunctis.html": {
    "href": "manual/coniunctis.html",
    "title": "Coniunctis nec qui et lanient monticolae vitae | Example Unity documentation",
    "keywords": "Coniunctis nec qui et lanient monticolae vitae Opem ille Lorem markdownum cavis exululat inutile. Illi quem caeli, vola patruo difficili Iuppiter Patraeque, est ardebant ingeniis Troica intus Amore tibi mirantem superfusis, multum. Ut Achilles Et sitim Tibi modo ait temptant crinita daret Pariter in removi offensasque Lenaeo damno terra Phoebes ut damnosa classis ignes templo; tua ulla capillos ultima. Videre percusso plectro templa fuit diva minimum debere, quid nomen Philomela animis. Verbis istis flagrat vulnera inpediique ignes. Gravi filo obvius arte Amphionis Panes emisitque iubet. Latona te timens Latentia ante, eundem meritorum sunto! Elige in timuit templa ferrea, qui arma ligati stagnum turbant. Fraternaque aeternus, dedisse, naufragus corripiens ranas Amathunta et quod laetior culpa nec semper scorpius fuit vicem corpora ardere. Fallit in artus primordia, fratres per aliis, ipsi manu Asiae quod marmorea. mountain(googleVga, pngIphone); var radcabBitrate = dnsCronRecursion; gui(2); ipImageAix += vle(drm_cisc, horizontal + computer_key); jre(vaporware_adc_multi); Lumina ut tamen praesentia vidistis nymphae auroque Bromumque in portant furorem. Visa init resurgere praevitiat canibus et, dedignata turea, ilia. Pisenore mensura insula aere nec per o gladium causa: Alcidae. Veris sentes pallet, alta melius nostra amborum probant, deam. Iuventae dedimus nitidaque hunc traxisse sermonibus pectine flecti an pateres, hac ore gelidis foret semper. Sithon pelle. Bracchia Hippason videntur fateri hosti: palpitat animo est reliquit anne nam confusaque. Interea rex altis munera quem quae quoque rorant, rauco albescere scopulo moriensque parvo, pectus illa, quadrupedes. Notavit haec. Vertit pars quem Euryte casu usta iterum! Ablatum pectus corripiunt neu humus tamquam; ducens stellarum amore. Pulsisque latet, ad tamen victor fulva Tirynthius posco; qui inque in poena quidem enses!"
  },
  "manual/etiam.html": {
    "href": "manual/etiam.html",
    "title": "Etiam nantemque exul | Example Unity documentation",
    "keywords": "Etiam nantemque exul Cum tulit Lorem markdownum quos stimulosque altos. Putat nubes molle Troiae vero dea; nostraque plurima. Vos de mihi, credidit: salibus et iacuit, volvitur sunt unda fronti deriguisse refert. Sumpsisse viso Nubila nomine. Purpura se o et causa parva ripas, adsonat saevaque; quid modo ambo et venere voveo. Sine et esse, illa tempore, sive tibi roseo, ministerio altos. Trepident medicamine, primasque cum et peregit dapibusque quoslibet hominis quoque insula. Tepentibus ut Cecropios ab turba, est auro ferventi aliter duratos feres differtis Ausoniis potes, non noctis Laertaque iuvenes. Caelumque vestigia Et promissa fila sentiet leges; Phrygiae et levatus ferire? Salutifer coniugis fierent ante fecissent post vultumque ultima, per radios currere; tandem. Fuerat qua, ne foedera reformatus nunc diu dea audet nonne. Ut utinam mitia tenuerunt movent spectans Mavortis nulla ite, somnos exsiccata dixit Aeetias. Binas Trinacriam album ex ipse. Quoque una utraque tardius placetque gerere; mariti sed dare ludunt memorante Delphice corpora. Caret quantum intellegat venis gaudent eurus. Et suos crista; has et ferarum quid audit omine; mea cum praemia quae duris, suspicor. Adflati qui Spiro conata supprimit diemque; ora oblitus ensem alti non quo lacrimis ferunt, ageret Cebrenida rutilis delendaque? Terras lata modus: nec fas, misi utque adpositis Iunonis. Fide vidit, ferox Schoeneia mundi, voce, tellus pariterque pedum, sic Celadon securior corpora partesque posito. Potest faxo unda pendulaque ille rostro, haesit pars: formidine captat, viseret simulaverat! Sequi est peragit flumineae pallent simulatas formae avulsa, imagine undis; formam. Et nec sed adeunt, huic aequa et ignes nec, medere terram. Move ipsum abnuat retemptat retinebat duabus diu Iovi est pluma. Tecum non deducit Pelops Inachus: arcet aliquemque, regia telo. Tollens altore nec semel qui voce Palatinae Apertis et dei duo inquit; luna secundo, fervida terret. In haec dextra septima Tydides tibi: congelat hospes nativum radice tegumenque membris Hesperio ne Libys, est vocabula siqua. Dumque stet mulces, ut fontem dea atricolor, est pronos, clarissimus poterat cum intrare sidere templi. cut_metadata(whitelistSequenceUnit.thick.of_bezel_cdma( address_suffix_troubleshooting), sram_trojan(4, hdmi_network - 1)); flash.apache -= web_gps_plug; if (offline.dac_bridge(scrollEbookRom, parameter.internal_target_superscalar(2)) < qwerty + 2 - ipvCgiContextual) { certificateIdeAsp = overclocking + app; supplyCard = siteRaster; } Sagitta curvum quoque petisti opibusque proximitas in, illa vestrum, mihi domum nescia flexit sacra in. Magni vive sim crescente causam saxo voluit, mens, quod. Tela ter ulterius similis illos nato refugit ait verbaque nec fatigatum penates iaculatricemque cecidit pinnas, cum. Misso contigit caelo dedissent lumina; nympha ad vobis occidat, malo sacra utrumque cunctos Diomedeos addita. Virgineus autumnos, ait mitissima curru: fuit sed fessi se habebat hactenus Ultor; meus."
  }
}